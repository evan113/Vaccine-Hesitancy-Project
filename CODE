---
title: "Vaccine Hesitancy Project"
author: "Evan Valdes"
date: "2023-01-03"
output: html_document
---

## Set working directory
```{r}
setwd("/Users/Evanvaldes1/Desktop/Vaccine Hesitancy Project")
```

## load in packages
```{r}
library(haven)
library(ggplot2)
library(ggstatsplot)
library(dplyr)
library(styler)
library(PerformanceAnalytics)
library(stargazer)
library(apaTables)
```

##______________________________________________________________________________
## DON'T NEED TO RUN ANY OF THIS ANYMORE - SEE BELOW FOR CODE
## load in SEPERATE COUNTRY DATA (NOT NECESSARY ANYMORE)
```{r}
USADATA <- read_sav("/Users/Evanvaldes1/Desktop/Vaccine Hesitancy Project/COUNTRY SPECIFIC RAW DATA/AASP+G-6+-+USA_January+12,+2023_21.24.zip")
CHDATA <- read_sav("/Users/Evanvaldes1/Desktop/Vaccine Hesitancy Project/COUNTRY SPECIFIC RAW DATA/AASP+G-6+-+CH_January+12,+2023_19.33.zip")
CHDATA2 <- read_sav("/Users/Evanvaldes1/Desktop/Vaccine Hesitancy Project/COUNTRY SPECIFIC RAW DATA/AASP+G-6+-+CH+-+Copy_February+12,+2023_15.51.zip")
PHDATA <- read_sav("/Users/Evanvaldes1/Desktop/Vaccine Hesitancy Project/COUNTRY SPECIFIC RAW DATA/AASP+G-6+PH_January+12,+2023_19.35.zip")
```

## MERGE BOTH CHINA DATASETS
```{r}
CHDATA <- bind_rows(CHDATA, CHDATA2)
```

## Creating Country variable in data
```{r}
CHDATA$Country = 1
PHDATA$Country = 2
USADATA$Country = 3
```

## vertical Merge data
## You need to do a vertical merge since it is two seperate groups
## that you are mergining - not matching participants via id
```{r}
CHDATA <- CHDATA[, -59:-60]
USADATA <- USADATA[,-19]
PHDATA <- PHDATA[,-59:-60]

## Making column name the same across CH / USA / PH
colnames(CHDATA)[53] = "CT"
colnames(USADATA)[53] = "CT"
colnames(PHDATA)[53] = "CT"

FULLDATA <- bind_rows(USADATA, CHDATA, PHDATA)

```

## Creating a subset version with only variables of interest
## Removing variables that are specific to qualtrics data
```{r}
FULLDATA <- FULLDATA[, -1:-8]
FULLDATA <- FULLDATA[, -2:-10]
```

## Reordering variables
```{r}
FULLDATA <- FULLDATA %>%
  select(ResponseId, Country, Age, Gender, Edu, everything())
```

## calculating average SJ scores for participants
```{r}
FULLDATA$SJ <- rowMeans(FULLDATA[ , 6:9], na.rm = T)
FULLDATA$SJ <- format(round(FULLDATA$SJ, 0), nsmall = 0)
```

## Calculating average trust in science score for participants
```{r}
FULLDATA$TRUSTSCIENCE <- rowMeans(FULLDATA[ , 36:39], na.rm = T)
FULLDATA$TRUSTSCIENCE <- format(round(FULLDATA$TRUSTSCIENCE, 0), nsmall = 0)
```


## Missing data analysis
## calculating NA's
## DONT RUN WHEN DOING CORRELATIONAL ANALYSIS - MICE OVERIDE FILTER FUNCTION
```{r}
missingdata <- subset(FULLDATA, select = c(
        "ResponseId","Country", "Age", "Gender", "Edu", "SJ_1", "SJ_2", "SJ_3", "SJ_4",
        "SIT_1", "SIT_2", "SIT_3", "SIT_4", "SIT_5", "SIT_6",
        "SIT_7", "SIT_8", "SIT_9","SIT_10", "SIT_11_1", "SIT_11_2",
        "T_G_1", "T_G_2", "T_G_3", "T_H_1", "T_H_2", "T_H_3", "T_S_1", "T_S_2",
        "T_S_3", "T_S_4", "CT", "PI_1_1", "TRUSTSCIENCE"
))

missingdata$Age <- as.numeric(missingdata$Age)
missingdata$Gender <- as.factor(missingdata$Gender)
missingdata$Edu <- as.numeric(missingdata$Edu)
missingdata$PI_1_1 <- as.numeric(missingdata$PI_1_1)
missingdata$TRUSTSCIENCE <- as.numeric(missingdata$TRUSTSCIENCE)
missingdata$CT <- as.numeric(missingdata$CT)

SJ_vars = grep("SJ", names(missingdata), value = TRUE)
missingdata[,SJ_vars] = sapply(missingdata[,SJ_vars], as.numeric)

SIT_vars = grep("SIT", names(missingdata), value = TRUE)
missingdata[,SIT_vars] = sapply(missingdata[,SIT_vars], as.numeric)

TG_vars = grep("T_G", names(missingdata), value = TRUE)
missingdata[,TG_vars] = sapply(missingdata[,TG_vars], as.numeric)

TS_vars = grep("T_S", names(missingdata), value = TRUE)
missingdata[,TS_vars] = sapply(missingdata[,TS_vars], as.numeric)

library(mice)
library(misty)
library(tidyverse)

colSums(is.na(missingdata))

totalcells <- prod(dim(missingdata))
missingcells <- sum(is.na(missingdata))
percentage <- (missingcells * 100)/(totalcells)
percentage

## Identifying where data is missing
md.pattern(missingdata)
## Little MCAR test
na.test(missingdata, digits = 2, p.digits = 3, as.na = NULL, check = T, output = T)


## Impute data function
imputed_data <- mice(missingdata, m=40, method = "rf", seed = 100)
summary(imputed_data)

options(scipen = 999)

stacked_imputed_data <- complete(imputed_data, "long", include = T)
finished_imputed_data <- complete(imputed_data, 4)
```

## Merging imputed with other variables not in imputation
```{r}
neededvars <- subset(FULLDATA, select = c(
        "ResponseId", "DV_si_1", "DV_si_2", "DV_sj_1", "DV_sj_2_1", "G_SI_Prime__1",
        "G_SI_Prime__2", "N_SI_Prime_1", "N_SI_Prime_2", "FL_21_DO_FL_24",
        "FL_21_DO_FL_26", "FL_31_DO_H_SJ", "FL_31_DO_L_SJ", "FL_27_DO_G_SI",
        "FL_27_DO_N_SI"
))

COMPLETEDDATA <- merge(finished_imputed_data, neededvars, by = "ResponseId", 
                       all = T)
```

## Creating new datafile to save into memory
## SPSS file
```{r}
write_sav(COMPLETEDDATA, "FULLDATA.sav")
```

##____________________________________________________________________________

## NOW USE THIS STARTING HERE ***
## LOAD IN multiply imputed DATA
```{r}
COMPLETEDDATA <- read_sav("~/Desktop/Vaccine Hesitancy Project/FULLDATA.sav")
```

## calculating SJ scores
```{r}
COMPLETEDDATA$SJ <- rowMeans(COMPLETEDDATA[ , 6:9], na.rm = T)
COMPLETEDDATA$SJ <- format(round(COMPLETEDDATA$SJ, 0), nsmall = 0)
COMPLETEDDATA$SJ <- as.numeric(COMPLETEDDATA$SJ)
```

## Calculating SIT scores
## Already did the reverse scoring 
```{r}
## Recode negatively keyed items 6-10
## Items 1-5 are positively keyed
## Calculate average 1-10 once 6-10 are reverse scored
COMPLETEDDATA$SIT_1 <- as.numeric(COMPLETEDDATA$SIT_1)
COMPLETEDDATA$SIT_2 <- as.numeric(COMPLETEDDATA$SIT_2)
COMPLETEDDATA$SIT_3 <- as.numeric(COMPLETEDDATA$SIT_3)
COMPLETEDDATA$SIT_4 <- as.numeric(COMPLETEDDATA$SIT_4)
COMPLETEDDATA$SIT_5 <- as.numeric(COMPLETEDDATA$SIT_5)
COMPLETEDDATA$SIT_6 <- as.numeric(COMPLETEDDATA$SIT_6)
COMPLETEDDATA$SIT_7 <- as.numeric(COMPLETEDDATA$SIT_7)
COMPLETEDDATA$SIT_8 <- as.numeric(COMPLETEDDATA$SIT_8)
COMPLETEDDATA$SIT_9 <- as.numeric(COMPLETEDDATA$SIT_9)
COMPLETEDDATA$SIT_10 <- as.numeric(COMPLETEDDATA$SIT_10)

COMPLETEDDATA$SIT_6 <- recode(COMPLETEDDATA$SIT_6,
                              "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1)
COMPLETEDDATA$SIT_7 <- recode(COMPLETEDDATA$SIT_7,
                              "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1)
COMPLETEDDATA$SIT_8 <- recode(COMPLETEDDATA$SIT_8,
                              "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1)
COMPLETEDDATA$SIT_9 <- recode(COMPLETEDDATA$SIT_9,
                              "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1)
COMPLETEDDATA$SIT_10 <- recode(COMPLETEDDATA$SIT_10,
                              "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1)

## Calculating average of all items in scale 
COMPLETEDDATA$SIT <- rowMeans(COMPLETEDDATA[ , 10:19], na.rm = T)
COMPLETEDDATA$SIT <- format(round(COMPLETEDDATA$SIT, 0), nsmall = 0)

COMPLETEDDATA$SIT <- as.numeric(COMPLETEDDATA$SIT)
```

## Calculating Trust items
```{r}
## Trust in healthcare
COMPLETEDDATA$TRUSTHEALTHCARE <- rowMeans(COMPLETEDDATA[ , 25:27], na.rm = T)
COMPLETEDDATA$TRUSTHEALTHCARE <- format(round(COMPLETEDDATA$TRUSTHEALTHCARE,
                                              0), nsmall = 0)
COMPLETEDDATA$TRUSTHEALTHCARE <- as.numeric(COMPLETEDDATA$TRUSTHEALTHCARE)

## Trust in government
COMPLETEDDATA$TRUSTGOVERNMENT <- rowMeans(COMPLETEDDATA[ , 22:24], na.rm = T)
COMPLETEDDATA$TRUSTGOVERNMENT <- format(round(COMPLETEDDATA$TRUSTGOVERNMENT,
                                              0), nsmall = 0)
COMPLETEDDATA$TRUSTGOVERNMENT <- as.numeric(
        COMPLETEDDATA$TRUSTGOVERNMENT
)

COMPLETEDDATA$TRUSTSCIENCE <- as.numeric(COMPLETEDDATA$TRUSTSCIENCE)
```
## Calculating national identification 
```{r}
COMPLETEDDATA$NATIONAL_IDENTIFCATION <- rowMeans(COMPLETEDDATA[ , 20:21], na.rm = T)
COMPLETEDDATA$NATIONAL_IDENTIFCATION <- format(round(COMPLETEDDATA$NATIONAL_IDENTIFCATION,
                                                     0), nsmall = 0)

COMPLETEDDATA$NATIONAL_IDENTIFCATION <- as.numeric(
        COMPLETEDDATA$NATIONAL_IDENTIFCATION
)
```

## Renaming country variable
```{r}
COMPLETEDDATA$Country <- as.character(COMPLETEDDATA$Country)

COMPLETEDDATA$Country[COMPLETEDDATA$Country == 1] <- "China"
COMPLETEDDATA$Country[COMPLETEDDATA$Country == 2] <- "Philippines"
COMPLETEDDATA$Country[COMPLETEDDATA$Country == 3] <- "USA"

## Making country a grouping variable
COMPLETEDDATA$Country <- as.factor(COMPLETEDDATA$Country)
```


## Calculating cronbach Alpha for all scales
```{r}
## SJ scale
library(ltm)
cronbachalphaSJ <- subset(COMPLETEDDATA,
                          select = c(SJ_1, SJ_2, SJ_3, SJ_4))

cronbach.alpha(cronbachalphaSJ, na.rm = T)

## SIT scale
cronbachalphaSIT <- subset(COMPLETEDDATA,
                           select = c(
                        SIT_1, SIT_2, SIT_3, SIT_4, SIT_5, SIT_6, SIT_7, SIT_8,
                        SIT_9, SIT_10
                           ))

cronbach.alpha(cronbachalphaSIT, na.rm = T)

## Trust in science scale
cronbachalphaSCIENCE <- subset(COMPLETEDDATA,
                               select = c(
                                       T_S_1, T_S_2, T_S_3, T_S_4
                               ))

cronbach.alpha(cronbachalphaSCIENCE, na.rm = T)

## Trust in health care scale
cronbachalphaHEALTH <- subset(COMPLETEDDATA,
                              select = c(
                                      T_H_1, T_H_2,T_H_3
                              ))

cronbach.alpha(cronbachalphaHEALTH, na.rm = T)

## Trust in government scale
cronbachalphaGOVERNMENT <- subset(COMPLETEDDATA, select = c(
        T_G_1, T_G_2, T_G_3
))

cronbach.alpha(cronbachalphaGOVERNMENT, na.rm = T)

## National identification
cronbachalphaNATID <- subset(COMPLETEDDATA, select = c(
        SIT_11_1, SIT_11_2
))

cronbach.alpha(cronbachalphaNATID, na.rm = T)
```

## Adding country-level moderator (Freedom)
## Data was exported from Freedomhouse
## Adding Freedom/Civil Liberty Scores (Larger scores indicate greater freedom)
```{r}
COMPLETEDDATA <- COMPLETEDDATA %>%
  mutate(Freedom = ifelse(Country == "China", 9,
    ifelse(Country == "Philippines", 55,
      ifelse(Country == "USA", 83,
        ""
      )
    )
  ))
```

## Seperate country datasets 
```{r}
SMALLCH <- filter(COMPLETEDDATA, Country == "China")

SMALLPH <- filter(COMPLETEDDATA, Country == "Philippines")

SMALLUS <- filter(COMPLETEDDATA, Country == "USA")
```

## Sample descriptive statistics
```{r}
library(tableone)
library(ggdag)
library(table1)


COMPLETEDDATA$Gender2 <- factor(COMPLETEDDATA$Gender, levels = c(1, 2, 3, 4),
                              labels = c("Male", "Female", "Non-Binary", "Prefer Not to Say"))

COMPLETEDDATA$Age <- as.numeric(COMPLETEDDATA$Age)

label(COMPLETEDDATA$Age) <- "Age"
label(COMPLETEDDATA$Gender2) <- "Gender"

## Creating descriptive table
summary(COMPLETEDDATA$Gender2)
mean(COMPLETEDDATA$Age, na.rm = T)
sd(COMPLETEDDATA$Age, na.rm = T)

attach(COMPLETEDDATA)
vars_for_table <- c("Age", "Gender2")

CreateTableOne(vars = vars_for_table, data = COMPLETEDDATA)
```

## Correlation Tables
```{r, warning=FALSE}
## FULLDATA Correlation
COMPLETEDDATA$SJ <- as.numeric(COMPLETEDDATA$SJ)
COMPLETEDDATA$SIT <- as.numeric(COMPLETEDDATA$SIT)
COMPLETEDDATA$Edu <- as.numeric(COMPLETEDDATA$Edu)
COMPLETEDDATA$CT <- as.numeric(COMPLETEDDATA$CT)
COMPLETEDDATA$PI_1_1 <- as.numeric(COMPLETEDDATA$PI_1_1)
COMPLETEDDATA$DV_sj_2_1 <- as.numeric(COMPLETEDDATA$DV_sj_2_1)
COMPLETEDDATA$DV_sj_1 <- as.numeric(COMPLETEDDATA$DV_sj_1)
COMPLETEDDATA$TRUSTSCIENCE <- as.numeric(COMPLETEDDATA$TRUSTSCIENCE)


fullcor <- subset(COMPLETEDDATA, select = c("SJ", "SIT",
                                           "Edu", "CT", "TRUSTSCIENCE",
                                        "PI_1_1","DV_sj_2_1", "DV_sj_1"))

chart.Correlation(fullcor)


## CHINA correlation
SMALLCH$SJ <- as.numeric(SMALLCH$SJ)
SMALLCH$SIT <- as.numeric(SMALLCH$SIT)
SMALLCH$Edu <- as.numeric(SMALLCH$Edu)
SMALLCH$CT <- as.numeric(SMALLCH$CT)
SMALLCH$PI_1_1 <- as.numeric(SMALLCH$PI_1_1)
SMALLCH$DV_sj_2_1 <- as.numeric(SMALLCH$DV_sj_2_1)
SMALLCH$DV_sj_1 <- as.numeric(SMALLCH$DV_sj_1)
SMALLCH$TRUSTSCIENCE <- as.numeric(SMALLCH$TRUSTSCIENCE)

chinacor <- subset(SMALLCH, select = c("SJ", "SIT",
                                           "Edu", "CT", "TRUSTSCIENCE",
                                        "PI_1_1","DV_sj_2_1", "DV_sj_1"))
chart.Correlation(chinacor)


## PHILIPPINES correlation
SMALLPH$SJ <- as.numeric(SMALLPH$SJ)
SMALLPH$SIT <- as.numeric(SMALLPH$SIT)
SMALLPH$Edu <- as.numeric(SMALLPH$Edu)
SMALLPH$CT <- as.numeric(SMALLPH$CT)
SMALLPH$PI_1_1 <- as.numeric(SMALLPH$PI_1_1)
SMALLPH$DV_sj_2_1 <- as.numeric(SMALLPH$DV_sj_2_1)
SMALLPH$DV_sj_1 <- as.numeric(SMALLPH$DV_sj_1)
SMALLPH$TRUSTSCIENCE <- as.numeric(SMALLPH$TRUSTSCIENCE)

philippinescor <- subset(SMALLPH, select = c("SJ", "SIT",
                                           "Edu", "CT", "TRUSTSCIENCE",
                                        "PI_1_1","DV_sj_2_1", "DV_sj_1"))
chart.Correlation(philippinescor)

## USA correlation
SMALLUS$SJ <- as.numeric(SMALLUS$SJ)
SMALLUS$SIT <- as.numeric(SMALLUS$SIT)
SMALLUS$Edu <- as.numeric(SMALLUS$Edu)
SMALLUS$CT <- as.numeric(SMALLUS$CT)
SMALLUS$PI_1_1 <- as.numeric(SMALLUS$PI_1_1)
SMALLUS$DV_sj_2_1 <- as.numeric(SMALLUS$DV_sj_2_1)
SMALLUS$DV_sj_1 <- as.numeric(SMALLUS$DV_sj_1)
SMALLUS$TRUSTSCIENCE <- as.numeric(SMALLUS$TRUSTSCIENCE)

usacor <- subset(SMALLUS, select = c("SJ", "SIT",
                                           "Edu", "CT", "TRUSTSCIENCE",
                                        "PI_1_1","DV_sj_2_1", "DV_sj_1"))
chart.Correlation(usacor)

```

## Writing cor table to doc for RG
```{r}
## full data cor
apa.cor.table(fullcor, filename = "Three-Country-Correlation.doc")

## China cor
apa.cor.table(chinacor, filename = "CHINACOR.doc")

## Philippines cor
apa.cor.table(philippinescor, filename = "PHILIPPINESCOR.doc")

## USA cor
apa.cor.table(usacor, filename = "USA.doc")
```

## Regressions


## Checking for data normality and homogeneity of variances (ANOVA ANALYSIS)
```{r}
library(dlookr)
library(car)

## Data normality
COMPLETEDDATA %>%
        group_by() %>%
        normality()

# Homogeneity of variances
leveneTest()
```

## ANOVA (one-way) | Fischer's, Welch's, Bayesian
```{r}
ggbetweenstats(
        data = COMPLETEDDATA,
        x = groupingvariable,
        y = dv,
        type = "parametric",
        var.equal = FALSE
)
```
##________________________________________________________________________________
